# -*- coding: utf-8 -*-
"""16_vector_operations.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1k-QOeGtcxtvdJoKLvjIgkXTxmeV2L3kM
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

sns.set()

plt.quiver(0,0,4,5)
plt.show()

plt.quiver(0,0,4,5, scale_units='xy',angles='xy',scale = 1)
plt.xlim(-8,8)
plt.ylim(-8,8)
plt.show()

plt.quiver(0,0,4,5, scale_units='xy',angles='xy',scale = 1,color='b')
plt.xlim(-8,8)
plt.ylim(-8,8)
plt.show()

plt.quiver(0,0,4,5, scale_units='xy',angles='xy',scale = 1,color='b')
plt.quiver(0,0,-3,-6, scale_units='xy',angles='xy',scale = 1,color='r')

plt.xlim(-8,8)
plt.ylim(-8,8)
plt.show()

"""Addition of two vectors

"""

vector1 = np.asarray([0,0,2,3])
vector2 = np.asarray([0,0,3,-2])
sum = vector1+vector2
print(sum)

plt.quiver(0,0,2,3, scale_units='xy',angles='xy',scale = 1,color='b')
plt.quiver(0,0,3,-2, scale_units='xy',angles='xy',scale = 1,color='y')
plt.quiver(0,0,5,1, scale_units='xy',angles='xy',scale = 1,color='r')
plt.xlim(-8,8)
plt.ylim(-8,8)
plt.show()

"""Substraction of vectors

"""

vector1 = np.asarray([0,0,2,3])
vector2 = np.asarray([0,0,3,-2])
diff = vector1-vector2
print(diff)

plt.quiver(0,0,2,3, scale_units='xy',angles='xy',scale = 1,color='b')
plt.quiver(0,0,3,-2, scale_units='xy',angles='xy',scale = 1,color='y')
plt.quiver(0,0,-1,5, scale_units='xy',angles='xy',scale = 1,color='r')
plt.xlim(-8,8)
plt.ylim(-8,8)
plt.show()

"""Multiplication of a vector by a scaler

"""

vector1 = np.asarray([0,0,2,3])
vector2 = 2*vector1
print(vector2)

plt.quiver(0,0,2,3, scale_units='xy',angles='xy',scale = 1,color='b')
plt.quiver(0,0,4,6, scale_units='xy',angles='xy',scale = 1,color='y')
plt.xlim(-8,8)
plt.ylim(-8,8)
plt.show()

plt.quiver(0,0,2,3, scale_units='xy',angles='xy',scale = 1,color='b')
plt.quiver(0,0,-1,-1.5, scale_units='xy',angles='xy',scale = 1,color='y')
plt.xlim(-8,8)
plt.ylim(-8,8)
plt.show()

"""**Dot Product of two Vectors**"""

a = np.array([2,3])

b = np.array([4,4])

a_dot_b = np.dot(a,b)

print(a_dot_b)

"""**Cross Product of 2 vectors**"""

a = np.array([2,3])

b = np.array([4,4])

a_cross_b = np.cross(a,b)

print(a_cross_b)

c = np.array([5,10,20])

d = np.array([18,32,50])

c_cross_d = np.cross(c,d)

print(c_cross_d)

"""**Projection of a vector A on vector B**

proj of A on V = ((A . V)/(||V||)^2) * V
"""

a = np.array([2,5])

v = np.array([8,-6])

# magnitude of "V" vector
magnitude_of_v = np.sqrt(np.sum(v**2))

proj_of_a_on_v = (np.dot(a,v)/magnitude_of_v**2)*v

print("Projection of a vector on v ",proj_of_a_on_v)

a = np.array([23,45,62])

v = np.array([45,82,67])

# magnitude of "V" vector
magnitude_of_v = np.sqrt(np.sum(v**2))

proj_of_a_on_v = (np.dot(a,v)/magnitude_of_v**2)*v

print("Projection of a vector on v ",proj_of_a_on_v)

